version: '3.9'

services:

  # api_db:
  #   image: postgres
  #   environment:
  #     - POSTGRES_DB=${API_POSTGRES_DB}
  #     - POSTGRES_USER=${API_POSTGRES_DB}
  #     - POSTGRES_PASSWORD=${API_POSTGRES_PASSWORD}
  #   # volumes:
  #     # - pgdata:/var/lib/posgresqldata
  #   networks:
  #     - crmnetwork

  postgres:
    image: postgres
    container_name: postgres
    environment:
      - POSTGRES_DB=${CRM_POSTGRES_DB}
      - POSTGRES_USER=${CRM_POSTGRES_DB}
      - POSTGRES_PASSWORD=${CRM_POSTGRES_PASSWORD}
      - POSTGRES_HOST=${CRM_POSTGRES_HOST}
    volumes:
      - pgdata:/var/lib/postgresql/data/

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 30s
      retries: 6
    restart: always


    ports:
      - 5432:5432

    # networks:
      # - crmnetwork



  crm:
    container_name: CRM
    hostname: crm
    build: ./Devs-Mentoring-CRM
    command:  sh -c "sleep 10 && python3 manage.py migrate && python3 manage.py runserver 8000"
    restart: always
    volumes:
      - ./Devs-Mentoring-CRM:/usr/src/app/
    ports:
      - 8000:8000
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - POSTGRES_DB=${CRM_POSTGRES_DB}
      - POSTGRES_USER=${CRM_POSTGRES_USER}
      - POSTGRES_PASSWORD=${CRM_POSTGRES_PASSWORD}
      - POSTGRES_HOST=${CRM_POSTGRES_HOST}

    # networks:
      # - crmnetwork
    depends_on:
        postgres:
          condition: service_healthy

  api:
    build: ./ExercisesAPI
    container_name: API
    hostname: api
    command: python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8001
    restart: always
    volumes:
      - ./ExercisesAPI:/usr/src/app
    ports:
      - 8001:8001
    environment:
      - DJANGO_SECRET=${DJANGO_SECRET}
      - POSTGRES_DB=${API_POSTGRES_DB}
      - POSTGRES_USER=${API_POSTGRES_USER}
      - POSTGRES_PASSWORD=${API_POSTGRES_PASSWORD}
      - POSTGRES_HOST=${API_POSTGRES_HOST}
    depends_on:
      - api_db
    networks:
      - crmnetwork
   
  computing:
    build: ./ExercisesComputing
    container_name: Computing
    hostname: computing
    command: python3 manage.py runserver 0.0.0.0:8002
    restart: always
    volumes:
      - ./ExercisesComputing:/usr/src/app
    ports:
      - 8002:8002
    environment:
      - DJANGO_SECRET=${DJANGO_SECRET}
    networks:
      - crmnetwork


  rabbit:
    image: rabbitmq:latest
    hostname: broker
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=mypass
    volumes:
        - /var/lib/rabbitmq
  
    networks:
      - crmnetwork

  celery:
    build: ./ExercisesComputing/
    restart: "no"
    command: celery -A ExercisesComputing worker -l info
    volumes:
      - ./ExercisesComputing:/computing
    depends_on:
      - rabbit
    networks:
      - crmnetwork
  
  prometheus:
    container_name: prometheus
    hostname: prometheus
    image: prom/prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
    ports:
      - "9090:9090"
    networks:
      - crmnetwork

  grafana:
    image: grafana/grafana
    ports:
      - 3000:3000
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/datasource.yml:/etc/grafana/datasources/datasource.yaml
    depends_on:
      - prometheus
    networks:
      - crmnetwork
networks:
  crmnetwork:
    external:
      name: CRM
volumes:
  pgdata: